export default {
  model: {
    desc: `Model ID used to generate the response.`,
  },
  frequency_penalty: {
    desc: `Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.`,
  },
  logit_bias: {
    desc: `Modify the likelihood of specified tokens appearing in the completion.
  
  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.`,
  },
  logprobs: {
    desc: `Whether to return log probabilities of the output tokens or not. If True, returns the log probabilities of each output token returned in the content of message.`,
  },
  top_logprobs: {
    desc: `An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to True if this parameter is used.`,
  },
  max_tokens: {
    desc: `The maximum number of tokens that can be generated in the chat completion. This value can be used to control costs for text generated via API.`,
  },
  max_completion_tokens: {
    desc: `An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.`,
  },
  n: {
    desc: `How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.`,
  },
  prediction: {
    desc: `Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time.`,
    type: {
      desc: `The type of the predicted content you want to provide.`,
    },
    content: {
      desc: `The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly.`,
      text_content: {
        desc: `The content used for a Predicted Output. This is often the text of a file you are regenerating with minor changes.`,
      },
      array_of_content_parts: {
        desc: `An array of content parts with a defined type. Supported options differ based on the model being used to generate the response. Can contain text inputs.`,
        text: {
          desc: `The text content.`,
        },
        type: {
          desc: `The type of the content part.`,
        },
      },
    },
  },
  presence_penalty: {
    desc: `Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.`,
  },
  seed: {
    desc: `This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.`,
  },
  messages: {
    desc: `A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, documents (txt, pdf), images, and audio.`,
    name: {
      desc: `An optional name for the participant. Provides the model information to differentiate between participants of the same role.`,
    },
    text_content: {
      desc: `The text contents of the message.`,
    },
    text: {
      desc: `The text content.`,
    },
    type: {
      desc: `The type of the content part.`,
    },
    role: {
      desc: `The role of the messages author`,
    },
    developer: {
      desc: `Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer, developer messages replace the previous system messages.`,
      content: {
        desc: `The contents of the developer message.`,
      },
      role: {
        desc: `The role of the author of the message — in this case, the developer.`,
      },
    },
    system: {
      desc: `Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer, use developer messages for this purpose instead.`,
      content: {
        desc: `The contents of the system message.`,
      },
      role: {
        desc: `The role of the author of the message — in this case, the system.`,
      },
    },
    user: {
      desc: `Messages sent by an end user, containing prompts or additional context information.`,
      content: {
        desc: `The contents of the user message.`,
        image_file: {
          type: {
            desc: `The type of the image.`,
          },
          media_type: {
            desc: `The media type of the image.`,
          },
          data: {
            desc: `The base64 encoded image data.`,
          },
        },
        image_url: {
          url: {
            desc: `Either a URL of the image or the base64 encoded image data. `,
          },
          detail: {
            desc: `Specifies the detail level of the image. Currently supports JPG/JPEG, PNG, GIF, and WEBP formats.`,
          },
        },
        input_audio: {
          data: {
            desc: `Base64 encoded audio data.`,
          },
          format: {
            desc: `The format of the encoded audio data. Currently supports "wav" and "mp3".`,
          },
        },
        file: {
          file_data: {
            default: {
              desc: `The file data, encoded in base64 and passed to the model as a string. Only PDF format is supported.`,
            },
            openai: {
              desc: `The file data, encoded in base64 and passed to the model as a string. Only PDF format is supported.
        - Maximum size per file: Up to 512 MB and up to 2 million tokens.
        - Maximum number of files: Up to 20 files can be attached to a single GPT application or Assistant. This limit applies throughout the application's lifetime.
        - Maximum total file storage per user: 10 GB.`,
              },
            },
          file_name: {
            desc: `The file name specified by the user. This name can be used to reference the file when interacting with the model, especially if multiple files are uploaded.`,
          },
        },
      },
      role: {
        desc: `The role of the author of the message — in this case, the user`,
      },
    },
    assistant: {
      desc: `Messages sent by the model in response to user messages.`,
      content: {
        desc: `The contents of the Assistant message. Required unless tool_calls or function_call is specified.`,
        text: {
          desc: `The contents of the Assistant message.`,
        },
        array: {
          desc: `An array of content parts with a defined type. Can be one or more of type text, or exactly one of type refusal.`,
          type: {
            desc: `The type of the content part.`,
          },
          text: {
            desc: `The text content.`,
          },
          refusal: {
            desc: `The refusal message generated by the model.`,
          },
        },
      },
      role: {
        desc: `The role of the author of the message — in this case, the Assistant.`,
      },
      audio: {
        desc: `Data about a previous audio response from the model.`,
        id: {
          desc: `Unique identifier for a previous audio response from the model.`,
        },
      },
      function_call: {
        desc: `Deprecated and replaced by tool_calls. The name and arguments of a function that should be called, as generated by the model.`,
      },
      refusal: {
        desc: `The refusal message by the Assistant.`,
      },
      tool_calls: {
        desc: `The tool calls generated by the model, such as function calls.`,
        function: {
          desc: `The function that the model called.`,
          arguments: {
            desc: `The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.`,
          },
          name: {
            desc: `The name of the function to call.`,
          },
        },
        id: {
          desc: `The ID of the tool call.`,
        },
        type: {
          desc: `The type of the tool. Currently, only function is supported.`,
        },
      },
    },
    tool: {
      desc: ``,
      content: {
        desc: `The contents of the tool message.`,
      },
      role: {
        desc: `The role of the author of the message — in this case, the tool.`,
      },
      tool_call_id: {
        desc: `Tool call that this message is responding to.`,
      },
    },
  },
  stream: {
    desc: `If set to True, the model response data will be streamed to the client as it is generated using server-sent events.`,
  },
  stream_options: {
    desc: `Additional parameters for configuring the streaming mode.`,
    include_usage: {
      desc: `Include token usage information in the stream.`,
    },
  },
  top_p: {
    desc: `An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  We generally recommend altering this or temperature but not both.`,
  },
  temperature: {
    desc: `What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.`,
    anthropic: {
      desc: `Amount of randomness injected into the response. Defaults to 1.0. Ranges from 0.0 to 1.0. Use temperature closer to 0.0 for analytical / multiple choice, and closer to 1.0 for creative and generative tasks. Note that even with temperature of 0.0, the results will not be fully deterministic.`,
    },
  },
  stop: {
    desc: `Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.`,
  },
  tools: {
    desc: `A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.`,
    anthropic: {
      desc: `Definitions of tools that the model may use.
  If you include tools in your API request, the model may return tool_use content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using tool_result content blocks.
  Each tool definition includes:
      name: Name of the tool.
      description: Optional, but strongly-recommended description of the tool.
      input_schema: JSON schema for the tool input shape that the model will produce in tool_use output content blocks.`,
      name: {
        desc: `Name of the tool.`,
      },
      description: {
        desc: `Description of what this tool does.
  Tool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.`,
      },
      input_schema: {
        desc: `JSON schema for this tool's input.
  This defines the shape of the input that your tool accepts and that the model will produce.`,
      },
    },
    type: {
      desc: `The type of the tool. Currently, only function is supported.`,
    },
    function: {
      desc: ``,
      name: {
        desc: `The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.`,
      },
      description: {
        desc: `A description of what the function does, used by the model to choose when and how to call the function.`,
      },
      parameters: {
        desc: `The parameters the functions accepts, described as a JSON Schema object.`,
        type: {
            desc: `The type of the parameters object (must be "object")`,
        },
        properties: {
            desc: `The properties of the function parameters`,
        },
        required: {
            desc: `List of required parameter names`,
        },
        additionalProperties: {
            desc: `Whether additional properties are allowed`,
        },
      },
      strict: {
        desc: `Whether to enable strict schema adherence when generating the function call. If set to True, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is True.`,
      },
    },
  },
  tool_choice: {
    desc: `Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
  none is the default when no tools are present. auto is the default if tools are present.`,
    string: {
      desc: `none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools.`,
    },
    object: {
      desc: `Specifies a tool the model should use. Use to force the model to call a specific function.`,
      function: {
        desc: ``,
        name: {
          desc: `The name of the function to call.`,
        },
      },
      type: {
        desc: `The type of the tool. Currently, only function is supported.`,
      },
    },
  },
  parallel_tool_calls: {
    desc: `Whether to enable parallel function calling during tool use.`,
  },
  reasoning_effort: {
    desc: `Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.`,
  },
  response_format: {
    desc: `An object specifying the format that the model must output.`,
    text: {
      desc: `Default response format. Used to generate text responses.`,
      type: {
        desc: `The type of response format being defined. Always text.`,
      },
    },
    json_schema: {
      desc: `JSON Schema response format. Used to generate structured JSON responses.`,
      type: {
        desc: `The type of response format being defined. Always json_schema.`,
      },
      json_schema: {
        desc: `Structured Outputs configuration options, including a JSON Schema.`,
        name: {
          desc: `The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.`,
        },
        description: {
          desc: `A description of what the response format is for, used by the model to determine how to respond in the format.`,
        },
        schema: {
          desc: `The schema for the response format, described as a JSON Schema object.`,
        },
        strict: {
          desc: `Whether to enable strict schema adherence when generating the output. If set to True, the model will always follow the exact schema defined in the schema field. Only a subset of JSON Schema is supported when strict is True.`,
        },
      },
    },
    json_object: {
      desc: `An older method of generating JSON responses. Using json_schema is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.`,
      type: {
        desc: `The type of response format being defined. Always json_object.`,
      },
    },
  },
  audio: {
    desc: `Parameters for audio output. Required when audio output is requested with modalities: ["audio"].`,
    format: {
      desc: `Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.`,
    },
    voice: {
      desc: `The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.`,
    },
  },
  modalities: {
    desc: `Output types that you would like the model to generate. Most models are capable of generating text, which is the default:
  
  ["text"]
  
  The gpt-4o-audio-preview model can also be used to generate audio. To request that this model generate both text and audio responses, you can use:
  
  ["text", "audio"]`,
  },
  web_search_options: {
    desc: `This tool searches the web for relevant results to use in a response.`,
    search_context_size: {
      desc: `High level guidance for the amount of context window space to use for the search. One of low, medium, or high. medium is the default.`,
    },
    user_location: {
      desc: `Approximate location parameters for the search.`,
      approximate: {
        desc: `Approximate location parameters for the search.`,
        city: {
          desc: `Free text input for the city of the user, e.g. San Francisco.`,
        },
        country: {
          desc: `The two-letter ISO country code of the user, e.g. US.`,
        },
        region: {
          desc: `Free text input for the region of the user, e.g. California.`,
        },
        timezone: {
          desc: `The IANA timezone of the user, e.g. America/Los_Angeles.`,
        },
      },
      type: {
        desc: `The type of location approximation. Always approximate.`,
      },
    },
  },
  metadata: {
    desc: `An object describing metadata about the request`,
  },
  stop_sequences: {
    desc: `Custom text sequences that will cause the model to stop generating.`,
  },
  system: {
    desc: `A system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role.`,
  },
  top_k: {
    desc: `Only sample from the top K options for each subsequent token. Used to remove "long tail" low probability responses. Recommended for advanced use cases only. You usually only need to use temperature.`,
  },
  thinking: {
    desc: `Configuration for enabling Claude's extended thinking. When enabled, responses include thinking content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your max_tokens limit.`,
    budget_tokens: {
      desc: `Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. Must be ≥1024 and less than max_tokens.`,
    },
  },
  repetition_penalty: {
    desc: `A number that controls the diversity of generated text by reducing the likelihood of repeated sequences. Higher values decrease repetition.`,
  },
  echo: {
    desc: `If True, the response will contain the prompt. Can be used with logprobs to return prompt logprobs.`,
  },
  min_p: {
    desc: `A number between 0.001 and 0.999 that can be used as an alternative to top_p and top_k.`,
  },
  top_a: {
    desc: `Alternate top sampling parameter.`,
  },
  mask_sensitive_info: {
    desc: `Mask (replace with ***) content in the output that involves private information, including but not limited to email, domain, link, ID number, home address, etc. Defaults to False, i.e. enable masking.`,
  },
  add_generation_prompt: {
    desc: `If True, the generation prompt will be added to the chat template. This is a parameter used by chat template in tokenizer config of the model.`,
  },
  add_special_tokens: {
    desc: `If True, special tokens (e.g. BOS) will be added to the prompt on top of what is added by the chat template. For most models, the chat template takes care of adding the special tokens so this should be set to False (as is the default).`,
  },
  documents: {
    desc: `'A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing "title" and "text" keys.`,
  },
  chat_template: {
    desc: `A Jinja template to use for this conversion. If this is not passed, the model's default chat template will be used instead.`,
  },
  chat_template_kwargs: {
    desc: `Additional kwargs to pass to the template renderer. Will be accessible by the chat template`,
  },
  include_stop_str_in_output: {
    desc: `Whether to include the stop string in the output. This is only applied when the stop or stop_token_ids is set`,
  },
  guided_json: {
    desc: `If specified, the output will follow the JSON schema.`,
  },
  guided_regex: {
    desc: `If specified, the output will follow the regex pattern.`,
  },
  guided_choice: {
    desc: `If specified, the output will be exactly one of the choices.`,
  },
  guided_grammar: {
    desc: `If specified, the output will follow the context free grammar.`,
  },
  guided_decoding_backend: {
    desc: `If specified, will override the default guided decoding backend of the server for this specific request. If set, must be either 'outlines' / 'lm-format-enforcer'`,
  },
  guided_whitespace_pattern: {
    desc: `If specified, will override the default whitespace pattern for guided json decoding.`,
  },
  ip: {
    desc: `IP from which a request is executed`,
  },
  search_mode: {
    desc: `Controls the search mode used for the request. When set to 'academic', results will prioritize scholarly sources like peer-reviewed papers and academic journals.`,
  },
  search_domain_filter: {
    desc: `A list of domains to limit search results to. Currently limited to 10 domains for Allowlisting and Denylisting. For Denylisting, add a - at the beginning of the domain string.`,
  },
  return_images: {
    desc: `Determines whether search results should include images.`,
  },
  return_related_questions: {
    desc: `Determines whether related questions should be returned.`,
  },
  search_recency_filter: {
    desc: `Filters search results based on time (e.g., 'week', 'day').`,
  },
  search_after_date_filter: {
    desc: `Filters search results to only include content published after this date. Format should be %m/%d/%Y (e.g. 3/1/2025)`,
  },
  search_before_date_filter: {
    desc: `Filters search results to only include content published before this date. Format should be %m/%d/%Y (e.g. 3/1/2025)`,
  },
  last_updated_after_filter: {
    desc: `Filters search results to only include content last updated after this date. Format should be %m/%d/%Y (e.g. 3/1/2025)`,
  },
  last_updated_before_filter: {
    desc: `Filters search results to only include content last updated before this date. Format should be %m/%d/%Y (e.g. 3/1/2025)`,
  },
  safety_model: { 
    desc: `The name of the moderation model used to validate tokens.`
  },
  prompt: { 
    desc: `A string providing context for the model to complete.`
  },
};
