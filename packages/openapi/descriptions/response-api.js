export default {
  background: {
    desc: `Whether to run the model response in the background`,
  },
  include: {
    desc: `Specify additional output data to include in the model response. Currently supported values are:
    - code_interpreter_call.outputs: Includes the outputs of python code execution in code interpreter tool call items.
    - computer_call_output.output.image_url: Include image urls from the computer call output.
    - file_search_call.results: Include the search results of the file search tool call.
    - message.output_text.logprobs: Include logprobs with assistant messages.
    - reasoning.encrypted_content: Includes an encrypted version of reasoning tokens in reasoning item outputs. This enables reasoning items to be used in multi-turn conversations when using the Responses API statelessly (like when the store parameter is set to false, or when an organization is enrolled in the zero data retention program).
`,
  },
  input: {
    desc: `Text, image, or file inputs to the model, used to generate a response.`,
    text_input: {
      desc: `A text input to the model, equivalent to a text input with the user role.`,
    },
    input_item_list: {
      desc: `A list of one or many input items to the model, containing different content types.`,
      input_message: {
        desc: `A message input to the model with a role indicating instruction following hierarchy. Instructions given with the developer or system role take precedence over instructions given with the user role. Messages with the assistant role are presumed to have been generated by the model in previous interactions.`,
        content: {
          desc: `Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.`,
          text_input: {
            desc: `A text input to the model.`,
          },
          input_item_content_list: {
            desc: `A list of one or many input items to the model, containing different content types.`,
            input_text: {
              desc: `A text input to the model.`,
              text: {
                desc: `The text input to the model.`,
              },
              type: {
                desc: `The type of the input item. Always input_text.`,
              },
            },
            input_image: {
              desc: `An image input to the model.`,
              detail: {
                desc: `The detail level of the image to be sent to the model. One of high, low, or auto.`,
              },
              type: {
                desc: `The type of the input item. Always input_image.`,
              },
              image_url: {
                desc: `The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.`,
              },
            },
            input_file: {
              desc: `A file input to the model.`,
              file_data: {
                desc: `The content of the file to be sent to the model.`,
              },
              type: {
                desc: `The type of the input item. Always input_file.`,
              },
              filename: {
                desc: `The name of the file to be sent to the model.`,
              },
            },
          },
        },
        role: {
          desc: `The role of the message input.`,
        },
        type: {
          desc: `The type of the message input. Always message.`,
        },
      },
      item: {
        desc: `An item representing part of the context for the response to be generated by the model. Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.`,
        input_message: {
          desc: `A message input to the model with a role indicating instruction following hierarchy. Instructions given with the developer or system role take precedence over instructions given with the user role.`,
          content: {
            desc: `A list of one or many input items to the model, containing different content types.`,
            input_text: {
              desc: `A text input to the model.`,
              text: {
                desc: `The text input to the model.`,
              },
              type: {
                desc: `The type of the input item. Always input_text.`,
              },
            },
            input_image: {
              desc: `An image input to the model.`,
              detail: {
                desc: `The detail level of the image to be sent to the model. One of high, low, or auto.`,
              },
              type: {
                desc: `The type of the input item. Always input_image.`,
              },
              image_url: {
                desc: `The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.`,
              },
            },
            input_file: {
              desc: `A file input to the model.`,
              file_data: {
                desc: `The content of the file to be sent to the model.`,
              },
              type: {
                desc: `The type of the input item. Always input_file.`,
              },
              filename: {
                desc: `The name of the file to be sent to the model.`,
              },
            },
          },
          role: {
            desc: `The role of the message input.`,
          },
          type: {
            desc: `The type of the message input. Always message.`,
          },
          status: {
            desc: `The status of item.`,
          },
        },
        output_message: {
          desc: `An output message from the model.`,
          content: {
            desc: `The content of the output message.`,
            output_text: {
              desc: `A text output from the model.`,
              annotations: {
                desc: `The annotations of the text output.`,
                url_citation: {
                  desc: `A citation for a web resource used to generate a model response.`,
                  end_index: {
                    desc: `The index of the last character of the URL citation in the message.`,
                  },
                  start_index: {
                    desc: `The index of the first character of the URL citation in the message.`,
                  },
                  title: {
                    desc: `The title of the web resource.`,
                  },
                  type: {
                    desc: `The type of the URL citation. Always url_citation.`,
                  },
                  url: {
                    desc: `The URL of the web resource.`,
                  },
                },
              },
              text: {
                desc: `The text output from the model.`,
              },
              type: {
                desc: `The type of the output text. Always output_text.`,
              },
            },
            refusal: {
              desc: `A refusal from the model.`,
              refusal: {
                desc: `The refusal explanationfrom the model.`,
              },
              type: {
                desc: `The type of the refusal. Always refusal.`,
              },
            },
          },
          id: {
            desc: `The unique ID of the output message.`,
          },
          role: {
            desc: `The role of the output message. Always assistant.`,
          },
          status: {
            desc: `The status of the message input.`,
          },
          type: {
            desc: `The type of the output message. Always message.`,
          },
        },
        computer_tool_call: {
          desc: `A tool call to a computer use tool.`,
          action: {
            click: {
              desc: `A click action.`,
              button: {
                desc: `Indicates which mouse button was pressed during the click.`,
              },
              type: {
                desc: `Specifies the event type. For a click action, this property is always set to click.`,
              },
              x: {
                desc: `The x-coordinate where the click occurred.`,
              },
              y: {
                desc: `The y-coordinate where the click occurred.`,
              },
            },
            double_click: {
              desc: `A double click action.`,
              type: {
                desc: `Specifies the event type. For a double click action, this property is always set to double_click.`,
              },
              x: {
                desc: `The x-coordinate where the double click occurred..`,
              },
              y: {
                desc: `The y-coordinate where the double click occurred.`,
              },
            },
            drag: {
              desc: `A drag action.`,
              path: {
                desc: `An array of coordinates representing the path of the drag action. Coordinates will appear as an array of objects, eg`,
                x: {
                  desc: `The x-coordinate.`,
                },
                y: {
                  desc: `The y-coordinate.`,
                },
              },
              type: {
                desc: `Specifies the event type. For a drag action, this property is always set to drag.`,
              },
            },
            key_press: {
              desc: `A collection of keypresses the model would like to perform.`,
              keys: {
                desc: `The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key.`,
              },
              type: {
                desc: `Specifies the event type. For a keypress action, this property is always set to keypress.`,
              },
            },
            move: {
              desc: `A mouse move action.`,
              type: {
                desc: `Specifies the event type. For a move action, this property is always set to move.`,
              },
              x: {
                desc: `The x-coordinate to move to.`,
              },
              y: {
                desc: `The y-coordinate to move to.`,
              },
            },
            screenshot: {
              desc: `A screenshot action.`,
              type: {
                desc: `Specifies the event type. For a screenshot action, this property is always set to screenshot.`,
              },
            },
            scroll: {
              desc: `A scroll action.`,
              scroll_x: {
                desc: `The horizontal scroll distance.`,
              },
              scroll_y: {
                desc: `The vertical scroll distance.`,
              },
              type: {
                desc: `Specifies the event type. For a scroll action, this property is always set to scroll.`,
              },
              x: {
                desc: `The x-coordinate where the scroll occurred.`,
              },
              y: {
                desc: `The y-coordinate where the scroll occurred.`,
              },
            },
            type: {
              desc: `An action to type in text.`,
              text: {
                desc: `The text to type.`,
              },
              type: {
                desc: `Specifies the event type. For a type action, this property is always set to type.`,
              },
            },
            wait: {
              desc: `A wait action.`,
              type: {
                desc: `Specifies the event type. For a wait action, this property is always set to wait.`,
              },
            },
          },
          call_id: {
            desc: `An identifier used when responding to the tool call with output.`,
          },
          id: {
            desc: `The unique ID of the computer call.`,
          },
          pending_safety_checks: {
            desc: `The pending safety checks for the computer call.`,
            code: {
              desc: `The type of the pending safety check.`,
            },
            id: {
              desc: `The ID of the pending safety check.`,
            },
            message: {
              desc: `Details about the pending safety check.`,
            },
          },
          status: {
            desc: `The status of the item.`,
          },
          type: {
            desc: `The type of the computer call. Always computer_call.`,
          },
        },
        computer_tool_call_output: {
          desc: `The output of a computer tool call.`,
          call_id: {
            desc: `The ID of the computer tool call that produced the output.`,
          },
          output: {
            desc: `A computer screenshot image used with the computer use tool.`,
            type: {
              desc: `Specifies the event type. For a computer screenshot, this property is always set to computer_screenshot.`,
            },
            image_url: {
              desc: `The URL of the screenshot image.`,
            },
          },
          type: {
            desc: `The type of the computer tool call output. Always computer_call_output.`,
          },
          acknowledged_safety_checks: {
            desc: `The safety checks reported by the API that have been acknowledged by the developer.`,
            id: {
              desc: `The ID of the pending safety check.`,
            },
            code: {
              desc: `The type of the pending safety check.`,
            },
            message: {
              desc: `Details about the pending safety check.`,
            },
          },
          id: {
            desc: `The ID of the computer tool call output.`,
          },
          status: {
            desc: `The status of the message input.`,
          },
        },
        web_search_tool_call: {
          desc: `The results of a web search tool call.`,
          id: {
            desc: `The unique ID of the web search tool call.`,
          },
          status: {
            desc: `The status of the web search tool call.`,
          },
          type: {
            desc: `The type of the web search tool call. Always web_search_call.`,
          },
        },
        function_tool_call: {
          desc: `A tool call to run a function.`,
          call_id: {
            desc: `The unique ID of the function tool call generated by the model.`,
          },
          arguments: {
            desc: `A JSON string of the arguments to pass to the function.`,
          },
          name: {
            desc: `The name of the function to run. `,
          },
          type: {
            desc: `The type of the function tool call. Always function_call.`,
          },
          id: {
            desc: `The unique ID of the function tool call.`,
          },
          status: {
            desc: `The status of the item. `,
          },
        },
        function_tool_call_output: {
          desc: `The output of a function tool call.`,
          call_id: {
            desc: `The unique ID of the function tool call generated by the model.`,
          },
          output: {
            desc: `A JSON string of the output of the function tool call.`,
          },
          type: {
            desc: `The type of the function tool call output. Always function_call_output.`,
          },
          id: {
            desc: `The unique ID of the function tool call output. Populated when this item is returned via API.`,
          },
          status: {
            desc: `The status of the item. `,
          },
        },
        reasoning: {
          desc: `A description of the chain of thought used by a reasoning model while generating a response. `,
          id: {
            desc: `The unique identifier of the reasoning content.`,
          },
          summary: {
            desc: `Reasoning text contents.`,
            text: {
              desc: `A short summary of the reasoning used by the model when generating the response.`,
            },
            type: {
              desc: `The type of the object. Always summary_text.`,
            },
          },
          type: {
            desc: `The type of the object. Always reasoning.`,
          },
          encrypted_content: {
            desc: `The encrypted content of the reasoning item - populated when a response is generated with reasoning.encrypted_content in the include parameter.`,
          },
          status: {
            desc: `The status of the item.`,
          },
        },
        code_interpreter_tool_call: {
          desc: `A tool call to run code.`,
          code: {
            desc: `The code to run, or null if not available.`,
          },
          container_id: {
            desc: `The ID of the container used to run the code.`,
          },
          id: {
            desc: `The unique ID of the code interpreter tool call.`,
          },
          outputs: {
            desc: `The outputs generated by the code interpreter, such as logs or images. Can be null if no outputs are available.`,
            code_interpreter_output_logs: {
              desc: `The logs output from the code interpreter.`,
              logs: {
                desc: `The logs output from the code interpreter.`,
              },
              type: {
                desc: `The type of the output. Always 'logs'.`,
              },
            },
            code_interpreter_output_image: {
              desc: `The image output from the code interpreter.`,
              type: {
                desc: `The type of the output. Always 'image'.`,
              },
              url: {
                desc: `The URL of the image output from the code interpreter.`,
              },
            },
          },
          status: {
            desc: `The status of the code interpreter tool call.`,
          },
          type: {
            desc: `The type of the code interpreter tool call. Always code_interpreter_call.`,
          },
        },
        local_shell_call: {
          desc: `A tool call to run a command on the local shell.`,
          action: {
            desc: `Execute a shell command on the server.`,
            command: {
              desc: `The command to run.`,
            },
            env: {
              desc: `Environment variables to set for the command.`,
            },
            type: {
              desc: `The type of the local shell action. Always exec.`,
            },
            timeout_ms: {
              desc: `Optional timeout in milliseconds for the command.`,
            },
            user: {
              desc: `Optional user to run the command as.`,
            },
            working_directory: {
              desc: `Optional working directory to run the command in.`,
            },
          },
          call_id: {
            desc: `The unique ID of the local shell tool call generated by the model.`,
          },
          id: {
            desc: `The unique ID of the local shell call.`,
          },
          status: {
            desc: `The status of the local shell call.`,
          },
          type: {
            desc: `The type of the local shell call. Always local_shell_call.`,
          },
        },
        local_shell_call_output: {
          desc: `The output of a local shell tool call.`,
          id: {
            desc: `The unique ID of the local shell tool call generated by the model.`,
          },
          output: {
            desc: `A JSON string of the output of the local shell tool call.`,
          },
          type: {
            desc: `The type of the local shell tool call output. Always local_shell_call_output.`,
          },
          status: {
            desc: `The status of the item.`,
          },
        },
        mcp_list_tools: {
          desc: `A list of tools available on an MCP server.`,
          id: {
            desc: `The unique ID of the list.`,
          },
          server_label: {
            desc: `The label of the MCP server.`,
          },
          tools: {
            desc: `The tools available on the server.`,
            input_schema: {
              desc: `The JSON schema describing the tool's input.`,
            },
            name: {
              desc: `The name of the tool.`,
            },
            annotations: {
              desc: `Additional annotations about the tool.`,
            },
            description: {
              desc: `The description of the tool.`,
            },
          },
          type: {
            desc: `The type of the item. Always mcp_list_tools.`,
          },
          error: {
            desc: `Error message if the server could not list tools.`,
          },
        },
        mcp_approval_request: {
          desc: `A request for human approval of a tool invocation.`,
          arguments: {
            desc: `A JSON string of arguments for the tool.`,
          },
          id: {
            desc: `The unique ID of the approval request.`,
          },
          name: {
            desc: `The name of the tool to run.`,
          },
          server_label: {
            desc: `The label of the MCP server making the request.`,
          },
          type: {
            desc: `The type of the item. Always mcp_approval_request.`,
          },
        },
        mcp_approval_response: {
          desc: `A response to an MCP approval request.`,
          approval_request_id: {
            desc: `The ID of the approval request being answered.`,
          },
          approve: {
            desc: `Whether the request was approved.`,
          },
          type: {
            desc: `The type of the item. Always mcp_approval_response.`,
          },
          id: {
            desc: `The unique ID of the approval response`,
          },
          reason: {
            desc: `Optional reason for the decision.`,
          },
        },
        mcp_tool_call: {
          desc: `An invocation of a tool on an MCP server.`,
          arguments: {
            desc: `A JSON string of the arguments passed to the tool.`,
          },
          id: {
            desc: `The unique ID of the tool call.`,
          },
          name: {
            desc: `The name of the tool that was run.`,
          },
          server_label: {
            desc: `The label of the MCP server running the tool.`,
          },
          type: {
            desc: `The type of the item. Always mcp_call.`,
          },
          error: {
            desc: `The error from the tool call, if any.`,
          },
          output: {
            desc: `The output from the tool call.`,
          },
        },
      },
      item_reference: {
        desc: `An internal identifier for an item to reference.`,
        id: {
          desc: `The ID of the item to reference.`,
        },
        type: {
          desc: `The type of item to reference. Always item_reference.`,
        },
      },
    },
  },
  instructions: {
    desc: `A system (or developer) message inserted into the model's context.

When using along with previous_response_id, the instructions from a previous response will not be carried over to the next response. This makes it simple to swap out system (or developer) messages in new responses.`,
  },
  max_output_tokens: {
    desc: `An upper bound for the number of tokens that can be generated for a response, including visible output tokens and reasoning tokens.`,
  },
  max_tool_calls: {
    desc: `The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.`,
  },
  metadata: {
    desc: `Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.

Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.`,
  },
  model: {
    desc: `Model ID used to generate the response.`,
  },
  parallel_tool_calls: {
    desc: `Whether to allow the model to run tool calls in parallel.`,
  },
  previous_response_id: {
    desc: `The unique ID of the previous response to the model. Use this to create multi-turn conversations.`,
  },
  prompt: {
    desc: `Reference to a prompt template and its variables.`,
    id: {
      desc: `The unique identifier of the prompt template to use.`,
    },
    variables: {
      desc: `Optional map of values to substitute in for variables in your prompt. The substitution values can either be strings, or other Response input types like images or files.`,
    },
    version: {
      desc: `Optional version of the prompt template.`,
    },
  },
  reasoning: {
    desc: `o-series models only
Configuration options for reasoning models.`,
    effort: {
      desc: `Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.`,
    },
    summary: {
      desc: `A summary of the reasoning performed by the model. This can be useful for debugging and understanding the model's reasoning process.`,
    },
  },
  store: {
    desc: `Whether to store the generated model response for later retrieval via API.`,
  },
  stream: {
    desc: `If set to true, the model response data will be streamed to the client as it is generated using server-sent events. `,
  },
  temperature: {
    desc: `What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.`,
  },
  text: {
    desc: `Configuration options for a text response from the model. Can be plain text or structured JSON data.`,
    format: {
      desc: `An object specifying the format that the model must output.`,
      text: {
        desc: `Default response format. Used to generate text responses.`,
        type: {
          desc: `The type of response format being defined. Always text.`,
        },
      },
      json_schema: {
        desc: `JSON Schema response format. Used to generate structured JSON responses.`,
        name: {
          desc: `The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.`,
        },
        schema: {
          desc: `The schema for the response format, described as a JSON Schema object.`,
        },
        type: {
          desc: `The type of response format being defined. Always json_schema.`,
        },
        description: {
          desc: `A description of what the response format is for, used by the model to determine how to respond in the format.`,
        },
        strict: {
          desc: `Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the schema field. Only a subset of JSON Schema is supported when strict is true.`,
        },
      },
      json_object: {
        desc: `JSON object response format. An older method of generating JSON responses. Using json_schema is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.`,
        type: {
          desc: `The type of response format being defined. Always json_object.`,
        },
      },
    },
  },
  tool_choice: {
    desc: `How the model should select which tool (or tools) to use when generating a response.`,
    tool_choice_mode: {
      desc: `Controls which (if any) tool is called by the model.

none means the model will not call any tool and instead generates a message.

auto means the model can pick between generating a message or calling one or more tools.

required means the model must call one or more tools.`
    },
    hosted_tool: {
      desc: `Indicates that the model should use a built-in tool to generate a response.`,
      type: {
        desc: `The type of hosted tool the model should to use.`,
      }
    },
    function_tool: {
      desc: `Use this option to force the model to call a specific function.`,
      name: {
        desc: `The name of the function to call.`
      },
      type: {
        desc: `For function calling, the type is always function.`
      },
    },
    mcp_tool: {
      desc: `Use this option to force the model to call a specific tool on a remote MCP server.`,
      server_label: {
        desc: `The label of the MCP server to use.`
      },
      type: {
        desc: `For MCP tools, the type is always mcp.`
      },
      name: {
        desc: `The name of the tool to call on the server.`
      },
    },
  },
  tools: {
    desc: `An array of tools the model may call while generating a response. You can specify which tool to use by setting the tool_choice parameter.`,
    function: {
      desc: `Defines a function in your own code the model can choose to call.`,
      name: {
        desc: `The name of the function to call.`,
      },
      parameters: {
        desc: `A JSON schema object describing the parameters of the function.`,
      },
      strict: {
        desc: `Whether to enforce strict parameter validation.`,
      },
      type: {
        desc: `The type of the function tool. Always function.`,
      },
      description: {
        desc: `A description of the function. Used by the model to determine whether or not to call the function.`,
      },
    },
    web_search_preview: {
      desc: `This tool searches the web for relevant results to use in a response.`,
      type: {
        desc: `The type of the web search tool. One of web_search_preview or web_search_preview_2025_03_11.`,
      },
      search_context_size: {
        desc: `High level guidance for the amount of context window space to use for the search. One of low, medium, or high. medium is the default.`,
      },
      user_location: {
        desc: `The user's location`,
        type: {
          desc: `The type of location approximation. Always approximate.`,
        },
        city: {
          desc: `Free text input for the city of the user, e.g. San Francisco.`,
        },
        country: {
          desc: `The two-letter ISO country code of the user, e.g. US.`,
        },
        region: {
          desc: `Free text input for the region of the user, e.g. California.`,
        },
        timezone: {
          desc: `The IANA timezone of the user, e.g. America/Los_Angeles.`,
        },
      },
    },
    computer_use_preview: {
      desc: `A tool that controls a virtual computer.`,
      display_height: {
        desc: `The height of the computer display.`,
      },
      display_width: {
        desc: `The width of the computer display.`,
      },
      environment: {
        desc: `The type of computer environment to control.`,
      },
      type: {
        desc: `The type of the computer use tool. Always computer_use_preview.`,
      },
    },
    mcp_tool: {
      desc: `Give the model access to additional tools via remote Model Context Protocol (MCP) servers.`,
      server_label: {
        desc: `A label for this MCP server, used to identify it in tool calls.`,
      },
      server_url: {
        desc: `The URL for the MCP server.`,
      },
      type: {
        desc: `The type of the MCP tool. Always mcp.`,
      },
      allowed_tools: {
        desc: `List of allowed tool names or a filter object.`,
        mcp_allowed_tools: {
          desc: `A string array of allowed tool names`,
        },
        mcp_allowed_tools_filter: {
          desc: `A filter object to specify which tools are allowed.`,
          tool_names: {
            desc: `List of allowed tool names.`,
          },
        },
      },
      headers: {
        desc: `Optional HTTP headers to send to the MCP server. Use for authentication or other purposes.`,
      },
      require_approval: {
        desc: `Specify which of the MCP server's tools require approval.`,
        mcp_tool_approval_filter: {
          always: {
            desc: `A list of tools that always require approval.`,
            tool_names: {
              desc: `List of tools that require approval.`,
            },
          },
          never: {
            desc: `A list of tools that never require approval.`,
            tool_names: {
              desc: `List of tools that do not require approval.`,
            },
          },
        },
        mcp_tool_approval_setting: {
          desc: `Specify a single approval policy for all tools. One of always or never. When set to always, all tools will require approval. When set to never, all tools will not require approval.`,
        },
      },
    },
    code_interpreter: {
      desc: `A tool that runs Python code to help generate a response to a prompt.`,
      container: {
        desc: `The container ID.`,
      },
      type: {
        desc: `The type of the code interpreter tool. Always code_interpreter.`,
      },
    },
    local_shell_tool: {
      desc: `A tool that allows the model to execute shell commands in a local environment.`,
      type: {
        desc: `The type of the local shell tool. Always local_shell.`,
      },
    },
  },
  top_logprobs: {
    desc: `An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.`,
  },
  top_p: {
    desc: `An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
We generally recommend altering this or temperature but not both.`,
  },
  truncation: {
    desc: `The truncation strategy to use for the model response.

    - auto: If the context of this response and previous ones exceeds the model's context window size, the model will truncate the response to fit the context window by dropping input items in the middle of the conversation.
    - disabled (default): If a model response will exceed the context window size for a model, the request will fail with a 400 error.
`,
  },
};
